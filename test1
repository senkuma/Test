// Base Talent Class
public abstract class Talent
{
    public string Name { get; protected set; }
    public string Description { get; protected set; }
    public int LevelRequirement { get; protected set; }
    public bool IsActivated { get; protected set; }

    public Talent(string name, string description, int levelRequirement)
    {
        Name = name;
        Description = description;
        LevelRequirement = levelRequirement;
        IsActivated = false;
    }

    public bool CanBeActivated(int playerLevel)
    {
        if (IsActivated) return false;
        if (playerLevel < LevelRequirement) return false;
        return true;
    }

    public void Activate()
    {
        if (CanBeActivated(Player.Instance.Level))
        {
            IsActivated = true;
            ApplyEffect();
        }
    }

    protected abstract void ApplyEffect(); // Virtual method to be overridden
}

// Derived Talent Classes
public class BasicAttackBoostTalent : Talent
{
    public BasicAttackBoostTalent() : base("Basic Attack Boost", "Boosts basic attack by 10%", 5) { }

    protected override void ApplyEffect()
    {
        Player.Instance.IncreaseAttack(10);
    }
}

public class AdvancedAttackBoostTalent : Talent
{
    public AdvancedAttackBoostTalent() : base("Advanced Attack Boost", "Boosts all attacks by 5%", 10) { }

    protected override void ApplyEffect()
    {
        Player.Instance.IncreaseAllAttacks(5);
    }
}

// Talent Manager
public class TalentManager : MonoBehaviour
{
    public List<Talent> Talents { get; private set; }

    private void Start()
    {
        Talents = new List<Talent>
        {
            new BasicAttackBoostTalent(),
            new AdvancedAttackBoostTalent()
            // Add other talents here
        };
    }

    public void ActivateTalent(string talentName)
    {
        Talent talent = Talents.Find(t => t.Name == talentName);
        talent?.Activate();
    }
}
